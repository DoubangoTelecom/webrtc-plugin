// rtc.idl : IDL source for rtc
//

// This file will be processed by the MIDL tool to
// produce the type library (rtc.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(E7924A16-1A24-472D-B481-92D7C2533F55),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IPlugin : IDispatch{
	[propget, id(1), helpstring("property versionName")] HRESULT versionName([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property mediaDevices")] HRESULT mediaDevices([out, retval] VARIANT* pVal);
	[propget, id(3), helpstring("property isWebRtcPlugin")] HRESULT isWebRtcPlugin([out, retval] VARIANT_BOOL* pVal);

	[id(10), helpstring("method createDisplay")] HRESULT createDisplay([out, retval] IDispatch** ppDisplay);
	[id(11), helpstring("method createSessionDescription")] HRESULT createSessionDescription([in] VARIANT RTCSessionDescriptionInit, [out, retval] IDispatch** ppSdp);
	[id(12), helpstring("method createDictOptions")] HRESULT createDictOptions([out, retval] IDispatch** ppDictOptions);
	[id(13), helpstring("method createPeerConnection")] HRESULT createPeerConnection([in, optional] VARIANT RTCConfiguration, [in, optional] VARIANT MediaConstraints, [out, retval] IDispatch** ppPeerConnection);
	[id(14), helpstring("method createIceCandidate")] HRESULT createIceCandidate([in] VARIANT RTCIceCandidateInit, [out, retval] IDispatch** ppIceCandidate);
	[id(15), helpstring("method createMediaStreamTrack")] HRESULT createMediaStreamTrack([out, retval] IDispatch** ppMediaStreamTrack);

	[id(40), helpstring("method bindEventListener")] HRESULT bindEventListener([in] BSTR type, [in, optional]VARIANT listenerCallback, [in, optional]VARIANT useCapture);
	[id(41), helpstring("method getSources")] HRESULT getSources([in, optional]VARIANT successCallback);
	[id(42), helpstring("method getWindows")] HRESULT getWindows([out, retval] VARIANT* winList);
	[id(43), helpstring("method getScreens")] HRESULT getScreens([out, retval] VARIANT* screenList);

	[propput, id(50), helpstring("property src")] HRESULT src([in] VARIANT newVal);
	[propget, id(51), helpstring("property videoWidth")] HRESULT videoWidth([out, retval] LONG* pVal);
	[propget, id(52), helpstring("property videoHeight")] HRESULT videoHeight([out, retval] LONG* pVal);
	[id(53), helpstring("method fillImageData")] HRESULT fillImageData([in] VARIANT imageData);
	[id(54), helpstring("method getScreenShot")] HRESULT getScreenShot([out, retval] BSTR* base64BitmapData);

	[propget, id(60), helpstring("property logSeverity")] HRESULT logSeverity([out, retval] BSTR* pVal);
	[propput, id(60), helpstring("property logSeverity")] HRESULT logSeverity([in] BSTR newVal);
};

[
	object,
	uuid(2785B9BD-CA2D-44DA-879B-FD15F9BA1D5F),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaDevices : IDispatch{
	[id(1), helpstring("method getSupportedConstraints")] HRESULT getSupportedConstraints([out, retval] VARIANT* pConstraints);
	[id(2), helpstring("method getUserMedia")] HRESULT getUserMedia([in] VARIANT constraints, [out, retval] VARIANT* pPromiseMediaStream);
	[id(3), helpstring("method enumerateDevices")] HRESULT enumerateDevices([out, retval] VARIANT* pPromiseSequenceMediaDeviceInfo);
};
[
	object,
	uuid(39C30596-997E-434C-8171-85B2730A9CA6),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaStreamDoubango : IDispatch{ // IMediaStream already exist in DirectShow base classes (link error : duplicated symbol)
	[propget, id(1), helpstring("property id")] HRESULT id([out, retval] BSTR* pVal);
	[id(2), helpstring("method getAudioTracks")] HRESULT getAudioTracks([out, retval] VARIANT* Tracks);
	[id(3), helpstring("method getVideoTracks")] HRESULT getVideoTracks([out, retval] VARIANT* Tracks);
	[id(4), helpstring("method getTracks")] HRESULT getTracks([out, retval] VARIANT* Tracks);
	[id(5), helpstring("method getTrackById")] HRESULT getTrackById([in] BSTR trackId, [out, retval] VARIANT* MediaStreamTrack);
	[id(6), helpstring("method addTrack")] HRESULT addTrack([in] VARIANT MediaStreamTrack);
	[id(7), helpstring("method removeTrack")] HRESULT removeTrack([in] VARIANT MediaStreamTrack);
	[id(8), helpstring("method clone")] HRESULT clone([out, retval] VARIANT* MediaStream);
	[propget, id(9), helpstring("property active")] HRESULT active([out, retval] VARIANT_BOOL* pVal);	
	[propget, id(10), helpstring("property onaddtrack")] HRESULT onaddtrack([out, retval] VARIANT* pVal);
	[propput, id(10), helpstring("property onaddtrack")] HRESULT onaddtrack([in] VARIANT newVal);
	[propget, id(11), helpstring("property onremovetrack")] HRESULT onremovetrack([out, retval] VARIANT* pVal);
	[propput, id(11), helpstring("property onremovetrack")] HRESULT onremovetrack([in] VARIANT newVal);
	[propget, id(12), helpstring("property oninactive")] HRESULT oninactive([out, retval] VARIANT* pVal);
	[propput, id(12), helpstring("property oninactive")] HRESULT oninactive([in] VARIANT newVal);
};
[
	object,
	uuid(212555EE-F2DC-4E4A-B27C-517D29E0B7A4),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaTrackSupportedConstraints : IDispatch{
	[propget, id(1), helpstring("property width")] HRESULT width([out, retval] VARIANT_BOOL* pVal);
	[propget, id(2), helpstring("property height")] HRESULT height([out, retval] VARIANT_BOOL* pVal);
	[propget, id(3), helpstring("property aspectRatio")] HRESULT aspectRatio([out, retval] VARIANT_BOOL* pVal);
	[propget, id(4), helpstring("property frameRate")] HRESULT frameRate([out, retval] VARIANT_BOOL* pVal);
	[propget, id(5), helpstring("property facingMode")] HRESULT facingMode([out, retval] VARIANT_BOOL* pVal);
	[propget, id(6), helpstring("property volume")] HRESULT volume([out, retval] VARIANT_BOOL* pVal);
	[propget, id(7), helpstring("property sampleRate")] HRESULT sampleRate([out, retval] VARIANT_BOOL* pVal);
	[propget, id(8), helpstring("property sampleSize")] HRESULT sampleSize([out, retval] VARIANT_BOOL* pVal);
	[propget, id(9), helpstring("property echoCancellation")] HRESULT echoCancellation([out, retval] VARIANT_BOOL* pVal);
	[propget, id(10), helpstring("property latency")] HRESULT latency([out, retval] VARIANT_BOOL* pVal);
	[propget, id(11), helpstring("property channelCount")] HRESULT channelCount([out, retval] VARIANT_BOOL* pVal);
	[propget, id(12), helpstring("property deviceId")] HRESULT deviceId([out, retval] VARIANT_BOOL* pVal);
	[propget, id(13), helpstring("property groupId")] HRESULT groupId([out, retval] VARIANT_BOOL* pVal);
};
[
	object,
	uuid(59C63051-0B14-4D44-8015-BD42BBCE4964),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IPromise : IDispatch{
	[id(1), helpstring("method then")] HRESULT then([in] VARIANT onFulfilled, [in, optional] VARIANT onRejected, [out, retval] VARIANT* pThePromise);
	// catch is reserved keyword and hacked using GetIDsOfNames wich means the id **must** be "2"
	[id(2), helpstring("method catch")] HRESULT catchh([in, optional] VARIANT onRejected, [out, retval] VARIANT* pThePromise);
};
[
	object,
	uuid(97C09588-9992-4809-900B-E7319C615DB1),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IErrorMessage : IDispatch{
	[propget, id(1), helpstring("property name")] HRESULT name([out, retval] BSTR* pVal);
};
[
	object,
	uuid(8F5B0823-989F-4E6F-A486-8ABFD523B22D),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaStreamTrack : IDispatch{
	[propget, id(1), helpstring("property kind")] HRESULT kind([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property id")] HRESULT id([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property label")] HRESULT label([out, retval] BSTR* pVal);
	[propget, id(4), helpstring("property enabled")] HRESULT enabled([out, retval] VARIANT_BOOL* pVal);
	[propput, id(4), helpstring("property enabled")] HRESULT enabled([in] VARIANT_BOOL newVal);
	[propget, id(5), helpstring("property muted")] HRESULT muted([out, retval] VARIANT_BOOL* pVal);
	[propget, id(6), helpstring("property onmute")] HRESULT onmute([out, retval] VARIANT* pVal);
	[propput, id(6), helpstring("property onmute")] HRESULT onmute([in] VARIANT newVal);
	[propget, id(7), helpstring("property onunmute")] HRESULT onunmute([out, retval] VARIANT* pVal);
	[propput, id(7), helpstring("property onunmute")] HRESULT onunmute([in] VARIANT newVal);
	[propget, id(10), helpstring("property readyState")] HRESULT readyState([out, retval] BSTR* pVal);
	[propget, id(12), helpstring("property onended")] HRESULT onended([out, retval] VARIANT* pVal);
	[propput, id(12), helpstring("property onended")] HRESULT onended([in] VARIANT newVal);
	[id(13), helpstring("method getCapabilities")] HRESULT getCapabilities([out, retval] VARIANT* MediaTrackCapabilities);
	[id(14), helpstring("method getConstraints")] HRESULT getConstraints([out, retval] VARIANT* MediaTrackConstraints);
	[id(15), helpstring("method getSettings")] HRESULT getSettings([out, retval] VARIANT* MediaTrackSettings);
	[id(17), helpstring("method applyConstraints")] HRESULT applyConstraints([in] VARIANT MediaTrackConstraints);
	[propget, id(18), helpstring("property onoverconstrained")] HRESULT onoverconstrained([out, retval] VARIANT* pVal);
	[propput, id(18), helpstring("property onoverconstrained")] HRESULT onoverconstrained([in] VARIANT newVal);
	[id(20), helpstring("method clone")] HRESULT clone([out, retval] VARIANT* MediaStreamTrack);
	[id(21), helpstring("method stop")] HRESULT stop();

	[propget, id(100), helpstring("property micLevel")] HRESULT micLevel([out, retval] INT* pVal); // not part of the standard
	[id(101), helpstring("method micLevelMonitoringStart")] HRESULT micLevelMonitoringStart(); // not part of the standard
	[id(102), helpstring("method micLevelMonitoringStop")] HRESULT micLevelMonitoringStop(); // not part of the standard
};
[
	object,
	uuid(CA8FD86D-739E-49E3-81DB-4DE70F63B892),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaTrackConstraints : IDispatch{
};
[
	object,
	uuid(CAD81D85-1B8C-4E1D-AD79-0B90D0FD6421),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaDeviceInfo : IDispatch{
	[propget, id(1), helpstring("property deviceId")] HRESULT deviceId([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property kind")] HRESULT kind([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property label")] HRESULT label([out, retval] BSTR* pVal);
	[propget, id(4), helpstring("property groupId")] HRESULT groupId([out, retval] BSTR* pVal);
};
[
	object,
	uuid(B2B753B0-85A5-400F-B4F6-2E04E8DF3AE7),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCPeerConnection : IDispatch{
	// === https://www.w3.org/TR/webrtc/#interface-definition === //
	[id(1), helpstring("method createOffer")] HRESULT createOffer([in, optional] VARIANT RTCOfferOptions, [out, retval] VARIANT* pPromiseRTCSessionDescriptionInit);
	[id(2), helpstring("method createAnswer")] HRESULT createAnswer([in, optional] VARIANT RTCAnswerOptions, [out, retval] VARIANT* pPromiseRTCSessionDescriptionInit);
	[id(3), helpstring("method setLocalDescription")] HRESULT setLocalDescription([in] VARIANT RTCSessionDescriptionInit, [out, retval] VARIANT* pPromiseVoid);
	[propget, id(4), helpstring("property localDescription")] HRESULT localDescription([out, retval] VARIANT* RTCSessionDescription);
	[propget, id(5), helpstring("property currentLocalDescription")] HRESULT currentLocalDescription([out, retval] VARIANT* RTCSessionDescription);
	[propget, id(6), helpstring("property pendingLocalDescription")] HRESULT pendingLocalDescription([out, retval] VARIANT* RTCSessionDescription);
	[id(7), helpstring("method setRemoteDescription")] HRESULT setRemoteDescription([in] VARIANT RTCSessionDescriptionInit, [out, retval] VARIANT* pPromiseVoid);
	[propget, id(8), helpstring("property remoteDescription")] HRESULT remoteDescription([out, retval] VARIANT* RTCSessionDescription);
	[propget, id(9), helpstring("property currentRemoteDescription")] HRESULT currentRemoteDescription([out, retval] VARIANT* RTCSessionDescription);
	[propget, id(10), helpstring("property pendingRemoteDescription")] HRESULT pendingRemoteDescription([out, retval] VARIANT* RTCSessionDescription);
	[id(11), helpstring("method addIceCandidate")] HRESULT addIceCandidate([in] VARIANT RTCIceCandidateInit, [out, retval] VARIANT* pPromiseVoid);
	[propget, id(12), helpstring("property signalingState")] HRESULT signalingState([out, retval] BSTR* RTCSignalingState);
	[propget, id(13), helpstring("property iceGatheringState")] HRESULT iceGatheringState([out, retval] BSTR* RTCIceGatheringState);
	[propget, id(14), helpstring("property iceConnectionState")] HRESULT iceConnectionState([out, retval] BSTR* RTCIceConnectionState);
	[propget, id(15), helpstring("property connectionState")] HRESULT connectionState([out, retval] BSTR* RTCPeerConnectionState);
	[propget, id(16), helpstring("property canTrickleIceCandidates")] HRESULT canTrickleIceCandidates([out, retval] VARIANT_BOOL* BooleanVal);
	// id 17 reserved for defaultIceServers which is implemented in JavaScript code
	[id(18), helpstring("method getConfiguration")] HRESULT getConfiguration([out, retval] VARIANT* RTCConfiguration);
	[id(19), helpstring("method setConfiguration")] HRESULT setConfiguration([in] VARIANT RTCConfiguration);
	[id(20), helpstring("method close")] HRESULT close();
	[id(21), helpstring("method addStream (Shim not part of the standard)")] HRESULT addStream([in] VARIANT MediaStream);
	[id(22), helpstring("method removeStream (Shim not part of the standard)")] HRESULT removeStream([in] VARIANT MediaStream);
	[propget, id(31), helpstring("property onnegotiationneeded")] HRESULT onnegotiationneeded([out, retval] VARIANT* pVal);
	[propput, id(31), helpstring("property onnegotiationneeded")] HRESULT onnegotiationneeded([in] VARIANT newVal);
	[propget, id(32), helpstring("property onicecandidate")] HRESULT onicecandidate([out, retval] VARIANT* pVal);
	[propput, id(32), helpstring("property onicecandidate")] HRESULT onicecandidate([in] VARIANT newVal);
	[propget, id(33), helpstring("property onicecandidateerror")] HRESULT onicecandidateerror([out, retval] VARIANT* pVal);
	[propput, id(33), helpstring("property onicecandidateerror")] HRESULT onicecandidateerror([in] VARIANT newVal);
	[propget, id(34), helpstring("property onsignalingstatechange")] HRESULT onsignalingstatechange([out, retval] VARIANT* pVal);
	[propput, id(34), helpstring("property onsignalingstatechange")] HRESULT onsignalingstatechange([in] VARIANT newVal);
	[propget, id(35), helpstring("property oniceconnectionstatechange")] HRESULT oniceconnectionstatechange([out, retval] VARIANT* pVal);
	[propput, id(35), helpstring("property oniceconnectionstatechange")] HRESULT oniceconnectionstatechange([in] VARIANT newVal);
	[propget, id(36), helpstring("property onicegatheringstatechange")] HRESULT onicegatheringstatechange([out, retval] VARIANT* pVal);
	[propput, id(36), helpstring("property onicegatheringstatechange")] HRESULT onicegatheringstatechange([in] VARIANT newVal);
	[propget, id(37), helpstring("property onconnectionstatechange")] HRESULT onconnectionstatechange([out, retval] VARIANT* pVal);
	[propput, id(37), helpstring("property onconnectionstatechange")] HRESULT onconnectionstatechange([in] VARIANT newVal);
	[propget, id(38), helpstring("property onfingerprintfailure")] HRESULT onfingerprintfailure([out, retval] VARIANT* pVal);
	[propput, id(38), helpstring("property onfingerprintfailure")] HRESULT onfingerprintfailure([in] VARIANT newVal);
	[propget, id(39), helpstring("property onaddstream (Shim not part of the standard)")] HRESULT onaddstream([out, retval] VARIANT* pVal);
	[propput, id(39), helpstring("property onaddstream (Shim not part of the standard)")] HRESULT onaddstream([in] VARIANT newVal);

	// The Peer-to-peer data API: https://www.w3.org/TR/webrtc/#rtcpeerconnection-interface-extensions-1
	[propget, id(50), helpstring("property sctp")] HRESULT sctp([out, retval] VARIANT* varRTCSctpTransport);
	[id(51), helpstring("method createDataChannel")] HRESULT createDataChannel([in] BSTR label, [in, optional] VARIANT varDataChannelDict, [out, retval] VARIANT* varRTCDataChannel);
	[propget, id(52), helpstring("property ondatachannel")] HRESULT ondatachannel([out, retval] VARIANT* varEventHandler);
	[propput, id(52), helpstring("property ondatachannel")] HRESULT ondatachannel([in] VARIANT varEventHandler);

	// The RTP media API: https://www.w3.org/TR/webrtc/#rtcpeerconnection-interface-extensions
	[id(60), helpstring("method getSenders")] HRESULT getSenders([out, retval] VARIANT* varSequenceRTCRtpSender);
	[id(61), helpstring("method getReceivers")] HRESULT getReceivers([out, retval] VARIANT* varSequenceRTCRtpReceiver);
	[id(62), helpstring("method getTransceivers")] HRESULT getTransceivers([out, retval] VARIANT* varSequenceRTCRtpTransceiver);
	[id(63), helpstring("method addTrack")] HRESULT addTrack([in] VARIANT varMediaStreamTrack, [in, optional] VARIANT varMediaStreams, [out, retval] VARIANT* varRTCRtpSender);
	[id(64), helpstring("method removeTrack")] HRESULT removeTrack([in] VARIANT varRTCRtpSender);
	[id(65), helpstring("method addTransceiver")] HRESULT addTransceiver([in] VARIANT varMediaStreamTrackorDOMStringTrackOrKind, [in, optional] VARIANT varRTCRtpTransceiverInit);
	[propget, id(66), helpstring("property ontrack")] HRESULT ontrack([out, retval] VARIANT* varEventHandler);
	[propput, id(66), helpstring("property ontrack")] HRESULT ontrack([in] VARIANT varEventHandler);	

	// The Statistics API: https://www.w3.org/TR/webrtc/#rtcpeerconnection-interface-extensions-2
	[id(70), helpstring("method getStats")] HRESULT getStats([in, optional] VARIANT varMediaStreamTrack, [out, retval] VARIANT* varPromiseRTCStatsReport);
};
[
	object,
	uuid(C3F56FD7-937E-42A6-8B00-65CB297FB8AA),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCSessionDescription : IDispatch{
	[propget, id(1), helpstring("property type")] HRESULT type([out, retval] BSTR* pVal);
	[propput, id(1), helpstring("property type")] HRESULT type([in] BSTR newVal); // ReadWrite instead of readOnly to emulate RTCSessionDescriptionInit 
	[propget, id(2), helpstring("property sdp")] HRESULT sdp([out, retval] BSTR* pVal);
	[propput, id(2), helpstring("property sdp")] HRESULT sdp([in] BSTR newVal); // ReadWrite instead of readOnly to emulate RTCSessionDescriptionInit 
};
[
	object,
	uuid(48ACEE72-5B42-463A-A31D-34AD55E61DE1),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCError : IDispatch{
	[propget, id(1), helpstring("property name")] HRESULT name([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property message")] HRESULT message([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property errorDetail")] HRESULT errorDetail([out, retval] BSTR* pVal);
	[propget, id(4), helpstring("property sdpLineNumber")] HRESULT sdpLineNumber([out, retval] LONG* pVal);
	[propget, id(5), helpstring("property httpRequestStatusCode")] HRESULT httpRequestStatusCode([out, retval] LONG* pVal);

	[id(10), helpstring("method toString")] HRESULT toString([out, retval] BSTR* String);
};
[
	object,
	uuid(4814FA61-92BC-4EBD-9C1E-D9B3ADB22E5A),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCIceCandidate : IDispatch{
	[propget, id(1), helpstring("property candidate")] HRESULT candidate([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property sdpMid")] HRESULT sdpMid([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property sdpMLineIndex")] HRESULT sdpMLineIndex([out, retval] USHORT* pVal);
	[propget, id(4), helpstring("property foundation")] HRESULT foundation([out, retval] BSTR* pVal);
	[propget, id(5), helpstring("property priority")] HRESULT priority([out, retval] ULONG* pVal);
	[propget, id(6), helpstring("property protocol")] HRESULT protocol([out, retval] BSTR* pVal);
	[propget, id(7), helpstring("property port")] HRESULT port([out, retval] USHORT* pVal);
	[propget, id(8), helpstring("property type")] HRESULT type([out, retval] BSTR* pVal);
	[propget, id(9), helpstring("property tcpType")] HRESULT tcpType([out, retval] BSTR* pVal);
	[propget, id(10), helpstring("property relatedAddress")] HRESULT relatedAddress([out, retval] BSTR* pVal);
	[propget, id(11), helpstring("property relatedPort")] HRESULT relatedPort([out, retval] USHORT* pVal);
	[propget, id(12), helpstring("property ufrag")] HRESULT ufrag([out, retval] BSTR* pVal);

	[id(20), helpstring("method toString")] HRESULT toString([out, retval] BSTR* String);
};
[
	object,
	uuid(CA821F0E-3D50-40B7-8684-60FC3DAFC262),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCPeerConnectionIceEvent : IDispatch{
	[propget, id(1), helpstring("property type")] HRESULT type([out, retval] BSTR* pVal);
	[propget, id(2), helpstring("property candidate")] HRESULT candidate([out, retval] VARIANT* RTCIceCandidate);
	[propget, id(3), helpstring("property url")] HRESULT url([out, retval] BSTR* pVal);
};
[
	object,
	uuid(5480960F-4930-4981-8661-018094DB19E9),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaStreamEvent : IDispatch{
	[propget, id(1), helpstring("method stream")] HRESULT stream([out, retval] VARIANT* MediaStream);
};
[
	object,
	uuid(528305BD-AF6E-4E7A-AD37-88C1363F0A70),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IEmpty : IDispatch{
};
[
	object,
	uuid(83C443DF-10BB-46DE-B5C6-5673512C660F),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCDataChannel : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcdatachannel
	[propget, id(1), helpstring("property label")] HRESULT label([out, retval] BSTR* USVString);
	[propget, id(2), helpstring("property ordered")] HRESULT ordered([out, retval] VARIANT_BOOL* pVal);
	[propget, id(3), helpstring("property maxPacketLifeTime")] HRESULT maxPacketLifeTime([out, retval] VARIANT* pVal);
	[propget, id(4), helpstring("property maxRetransmits")] HRESULT maxRetransmits([out, retval] VARIANT* pVal);
	[propget, id(5), helpstring("property protocol")] HRESULT protocol([out, retval] BSTR* USVString);
	[propget, id(6), helpstring("property negotiated")] HRESULT negotiated([out, retval] VARIANT_BOOL* pVal);
	[propget, id(7), helpstring("property id")] HRESULT id([out, retval] VARIANT* pVal);
	[propget, id(8), helpstring("property priority")] HRESULT priority([out, retval] BSTR* RTCPriorityType);
	[propget, id(9), helpstring("property readyState")] HRESULT readyState([out, retval] BSTR* RTCDataChannelState);
	[propget, id(10), helpstring("property bufferedAmount")] HRESULT bufferedAmount([out, retval] ULONG64* pVal);
	[propget, id(11), helpstring("property bufferedAmountLowThreshold")] HRESULT bufferedAmountLowThreshold([out, retval] ULONG64* pVal);
	[propput, id(11), helpstring("property bufferedAmountLowThreshold")] HRESULT bufferedAmountLowThreshold([in] ULONG64 newVal);
	[propget, id(12), helpstring("property binaryType")] HRESULT binaryType([out, retval] BSTR* DOMString);
	[propput, id(12), helpstring("property binaryType")] HRESULT binaryType([in] BSTR DOMString);
	[propget, id(13), helpstring("property onopen")] HRESULT onopen([out, retval] VARIANT* varEventHandler);
	[propput, id(13), helpstring("property onopen")] HRESULT onopen([in] VARIANT varEventHandler);
	[propget, id(14), helpstring("property onerror")] HRESULT onerror([out, retval] VARIANT* varEventHandler);
	[propput, id(14), helpstring("property onerror")] HRESULT onerror([in] VARIANT varEventHandler);
	[propget, id(15), helpstring("property onclose")] HRESULT onclose([out, retval] VARIANT* varEventHandler);
	[propput, id(15), helpstring("property onclose")] HRESULT onclose([in] VARIANT varEventHandler);
	[propget, id(16), helpstring("property onmessage")] HRESULT onmessage([out, retval] VARIANT* varEventHandler);
	[propput, id(16), helpstring("property onmessage")] HRESULT onmessage([in] VARIANT varEventHandler);
	[propget, id(17), helpstring("property onbufferedamountlow")] HRESULT onbufferedamountlow([out, retval] VARIANT* varEventHandler);
	[propput, id(17), helpstring("property onbufferedamountlow")] HRESULT onbufferedamountlow([in] VARIANT varEventHandler);
	[id(18), helpstring("method close")] HRESULT close();
	[id(19), helpstring("method send")] HRESULT send([in] VARIANT data);

	// Not part of the std
	[id(40), helpstring("method addEventListener")] HRESULT addEventListener([in] BSTR type, [in, optional]VARIANT listenerCallback, [in, optional]VARIANT useCapture);
	[id(41), helpstring("method removeEventListener")] HRESULT removeEventListener([in] BSTR type, [in, optional]VARIANT listenerCallback, [in, optional]VARIANT useCapture);
};
[
	object,
	uuid(08D4E0DC-A254-4FAE-8B72-1CA4F89E5873),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCDataChannelEvent : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcdatachannelevent
	[propget, id(1), helpstring("property channel")] HRESULT channel([out, retval] VARIANT* varRTCDataChannel);
};
[
	object,
	uuid(624A33DF-99D1-49AF-A476-63DA117817DB),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCWindow : IDispatch{
	[propget, id(1), helpstring("property id")] HRESULT id([out, retval] INT_PTR* pVal);
	[propget, id(2), helpstring("property title")] HRESULT title([out, retval] BSTR* pVal);
};
[
	object,
	uuid(4E9C389F-59C1-4F67-92E3-C26C05927CE2),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCScreen : IDispatch{
	[propget, id(1), helpstring("property id")] HRESULT id([out, retval] INT_PTR* pVal);
	[propget, id(2), helpstring("property title")] HRESULT title([out, retval] BSTR* pVal);
};
[
	object,
	uuid(E393A0A1-58CD-4D33-90A6-E95BEF050752),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCDTMFSender : IDispatch{
	// https://www.w3.org/TR/webrtc/#rtcdtmfsender
	[id(1), helpstring("method insertDTMF")] HRESULT insertDTMF([in] BSTR tones, [in, optional] VARIANT duration, [in, optional] VARIANT interToneGap);
	[propget, id(2), helpstring("property ontonechange")] HRESULT ontonechange([out, retval] VARIANT* varEventHandler);
	[propput, id(2), helpstring("property ontonechange")] HRESULT ontonechange([in] VARIANT varEventHandler);
	[propget, id(3), helpstring("property toneBuffer")] HRESULT toneBuffer([out, retval] BSTR* bstrBuffer);
};
[
	object,
	uuid(BADBBC8D-E670-453A-A1D1-B410F7E74737),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCTrackEvent : IDispatch{
};
[
	object,
	uuid(C0ECD6D4-39AF-4D4F-8844-59BC8E56BC9E),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCRtpSender : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcrtpsender
	[propget, id(1), helpstring("property track")] HRESULT track([out, retval] VARIANT* varMediaStreamTrack);
	[propget, id(2), helpstring("property transport")] HRESULT transport([out, retval] VARIANT* varRTCDtlsTransport);
	[propget, id(3), helpstring("property rtcpTransport")] HRESULT rtcpTransport([out, retval] VARIANT* varRTCDtlsTransport);
	// ToBeAddedInJavascriptCode (PluginObj::getRTCRtpCapabilities(DOMString kind)): static RTCRtpCapabilities getCapabilities(DOMString kind);
	[id(4), helpstring("method setParameters")] HRESULT setParameters([in, optional] VARIANT varRTCRtpParameters, [out, retval] VARIANT* varPromiseVoid);
	[id(5), helpstring("method getParameters")] HRESULT getParameters([out, retval] VARIANT* varRTCRtpParameters);
	[id(6), helpstring("method replaceTrack")] HRESULT replaceTrack([in] VARIANT varMediaStreamTrack, [out, retval] VARIANT* varPromiseVoid);
	
	// https://www.w3.org/TR/webrtc/#rtcrtpsender-interface-extensions
	[propget, id(10), helpstring("property dtmf")] HRESULT dtmf([out, retval] VARIANT* varRTCDTMFSender);
};
[
	object,
	uuid(C2E33966-8DAC-4A24-928E-FF9029027D05),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCDTMFToneChangeEvent : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcdtmftonechangeevent
	[propget, id(1), helpstring("property tone")] HRESULT tone([out, retval] BSTR* varTone);
};
[
	object,
	uuid(0F0B140A-1904-44A5-9FFC-D44B42B367C3),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCStats : IDispatch{
	// https://www.w3.org/TR/webrtc/#rtcstats-dictionary
	[propget, id(1), helpstring("property timestamp")] HRESULT timestamp([out, retval] DOUBLE* pVal);
	[propget, id(2), helpstring("property type")] HRESULT type([out, retval] BSTR* pVal);
	[propget, id(3), helpstring("property id")] HRESULT id([out, retval] BSTR* pVal);
	//!\\ Id numbers within [100 - x] are reserved 
};
[
	object,
	uuid(D19FE2EC-49D5-4A2D-8FE7-A8D5E459341A),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCStatsReport : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcstatsreport
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	// This interface has "entries", "forEach", "get", "has", "keys", "values", @@iterator methods and a "size" getter brought by readonly maplike.
	[id(1), helpstring("method entries")] HRESULT entries([out, retval] VARIANT* varIterator);
	[id(2), helpstring("method forEach")] HRESULT forEach([in] VARIANT varCallback, [in, optional] VARIANT varThisArg);
	[id(3), helpstring("method get")] HRESULT get([in] VARIANT varKey, [out, retval] VARIANT* varEntry);
	[id(4), helpstring("method has")] HRESULT has([in] VARIANT varKey, [out, retval] VARIANT_BOOL* varBool);
	[id(5), helpstring("method keys")] HRESULT keys([out, retval] VARIANT* varIterator);
	[id(6), helpstring("method values")] HRESULT values([out, retval] VARIANT* varIterator);
	[propget, id(7), helpstring("property size")] HRESULT size([out, retval] LONG* pVal);
};
[
	object,
	uuid(B9022511-3E81-4389-9BB0-667FEA36B40C),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCRtpReceiver : IDispatch{
	// https://www.w3.org/TR/webrtc/#dom-rtcrtpreceiver
	[propget, id(1), helpstring("property track")] HRESULT track([out, retval] VARIANT* varMediaStreamTrack);
	[propget, id(2), helpstring("property transport")] HRESULT transport([out, retval] VARIANT* varRTCDtlsTransport);
	[propget, id(3), helpstring("property rtcpTransport")] HRESULT rtcpTransport([out, retval] VARIANT* varRTCDtlsTransport);
	// ToBeAddedInJavascriptCode (PluginObj::getRTCRtpCapabilities(DOMString kind)): static RTCRtpCapabilities getCapabilities(DOMString kind);
	[id(4), helpstring("method getParameters")] HRESULT getParameters([out, retval] VARIANT* varRTCRtpParameters);
	[id(5), helpstring("method getContributingSources")] HRESULT getContributingSources([out, retval] VARIANT* varSequenceRTCRtpContributingSource);
};
[
	object,
	uuid(1DE917D5-1BE6-4D0C-AE95-A35C3E03A2C8),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMessageEvent : IDispatch{
	// https://www.w3.org/TR/webmessaging/#the-messageevent-interfaces
	[propget, id(1), helpstring("property data")] HRESULT data([out, retval] VARIANT* varAny);
	[propget, id(2), helpstring("property origin")] HRESULT origin([out, retval] BSTR* DOMString);
	[propget, id(3), helpstring("property lastEventId")] HRESULT lastEventId([out, retval] BSTR* DOMString);
};












[
	uuid(5701E57F-4D99-450D-8479-BC9871799B8D),
	version(1.0),
]
library rtcLib
{
	importlib("stdole2.tlb");
	[
		uuid(2D6EAD85-CE94-49DA-BC4F-1C122C3558B3)		
	]
	dispinterface _IPluginEvents
	{
		properties:
		methods:
	};
	[
		uuid(F8CFFADD-7ED1-46E9-BEFD-DE7DE1092074),		
		control
	]
	coclass Plugin
	{
		[default] interface IPlugin;
		[default, source] dispinterface _IPluginEvents;
	};
	[
		uuid(8715C55C-EB79-40E7-BBAE-CDFC127498C9)		
	]
	coclass MediaDevices
	{
		[default] interface IMediaDevices;
	};
	[
		uuid(B1F9B307-84D4-49D1-9817-92541F56D9ED)		
	]
	coclass MediaStream
	{
		[default] interface IMediaStreamDoubango;
	};
	[
		uuid(FC18B94E-A34B-41A4-9ECC-8DC9A935565B)		
	]
	coclass MediaTrackSupportedConstraints
	{
		[default] interface IMediaTrackSupportedConstraints;
	};
	[
		uuid(310F737F-B074-46C3-AF4B-6CD06D69C613)		
	]
	coclass Promise
	{
		[default] interface IPromise;
	};
	[
		uuid(751EF633-E34A-4CB7-BA2F-8E8044CFC7FA)		
	]
	coclass ErrorMessage
	{
		[default] interface IErrorMessage;
	};
	[
		uuid(85C22736-EA22-41BF-A7A2-E25DBD63BA3B)		
	]
	coclass MediaStreamTrack
	{
		[default] interface IMediaStreamTrack;
	};
	[
		uuid(66EBA785-4C5C-48E3-8087-4F52E252AE92)		
	]
	coclass MediaTrackConstraints
	{
		[default] interface IMediaTrackConstraints;
	};
	[
		uuid(B99DCC2F-D37C-4053-9C8F-82E7E5F1EDB1)		
	]
	coclass MediaDeviceInfo
	{
		[default] interface IMediaDeviceInfo;
	};
	[
		uuid(3325022A-66CE-421A-88A0-45CB438A8A8D)		
	]
	coclass RTCPeerConnection
	{
		[default] interface IRTCPeerConnection;
	};
	[
		uuid(146F17F4-9310-454C-9179-4D719975C815)		
	]
	coclass RTCSessionDescription
	{
		[default] interface IRTCSessionDescription;
	};
	[
		uuid(A7D9F96B-0FC1-4165-ADA5-BA790246BE4F)		
	]
	coclass RTCError
	{
		[default] interface IRTCError;
	};
	[
		uuid(20E253DA-1FAB-458B-B73A-E8EFB8793D2A)		
	]
	coclass RTCIceCandidate
	{
		[default] interface IRTCIceCandidate;
	};
	[
		uuid(F0B10277-5D59-428B-8EC1-E63C1D0E0714)		
	]
	coclass RTCPeerConnectionIceEvent
	{
		[default] interface IRTCPeerConnectionIceEvent;
	};
	[
		uuid(FB701742-2F19-435F-83A5-BECF5D06E3B2)		
	]
	coclass MediaStreamEvent
	{
		[default] interface IMediaStreamEvent;
	};
	[
		uuid(B162422C-E96D-41CF-804E-C5BF4252813C)		
	]
	coclass Empty
	{
		[default] interface IEmpty;
	};
	[
		uuid(18001236-9A8E-4C9B-A8B4-097F9D674C22)		
	]
	coclass RTCDataChannel
	{
		[default] interface IRTCDataChannel;
	};
	[
		uuid(F7312F73-98C4-4317-B5BE-092EE286EF25)		
	]
	coclass RTCDataChannelEvent
	{
		[default] interface IRTCDataChannelEvent;
	};
	[
		uuid(F7B00619-8D49-4F38-93D8-BBCF72539B37)		
	]
	coclass RTCWindow
	{
		[default] interface IRTCWindow;
	};
	[
		uuid(19EB10C5-4F36-4DD0-8DCD-0DCAC12FE687)		
	]
	coclass RTCScreen
	{
		[default] interface IRTCScreen;
	};
	[
		uuid(252A3B51-DC05-48D6-B2B6-7E2FF3987380)		
	]
	coclass RTCDTMFSender
	{
		[default] interface IRTCDTMFSender;
	};
	[
		uuid(7728A3F5-1805-4C18-BBB9-EF2DEDC92698)		
	]
	coclass RTCTrackEvent
	{
		[default] interface IRTCTrackEvent;
	};
	[
		uuid(68F4CB24-B74B-4EAC-8D55-E3305D01349B)		
	]
	coclass RTCRtpSender
	{
		[default] interface IRTCRtpSender;
	};
	[
		uuid(65D1AD0F-E022-4BC5-A6FC-2876A666B26F)		
	]
	coclass RTCDTMFToneChangeEvent
	{
		[default] interface IRTCDTMFToneChangeEvent;
	};
	[
		uuid(BF4E13F6-1BFE-4C37-8E74-C72A26FD4E32)		
	]
	coclass RTCStats
	{
		[default] interface IRTCStats;
	};
	[
		uuid(D344AC65-DEF1-48B2-A035-B712B43B7377)		
	]
	coclass RTCStatsReport
	{
		[default] interface IRTCStatsReport;
	};
	[
		uuid(450B8CED-6446-4074-8630-3F331C576F68)		
	]
	coclass RTCRtpReceiver
	{
		[default] interface IRTCRtpReceiver;
	};
	[
		uuid(757CE69A-9AB3-4F85-AB01-97EE17E6AD61)		
	]
	coclass MessageEvent
	{
		[default] interface IMessageEvent;
	};
};

